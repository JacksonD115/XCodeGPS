import SwiftUI
import MapKit

struct IdentifiableCoordinate: Identifiable, Equatable {
    let id = UUID()
    let coordinate: CLLocationCoordinate2D
    
    static func == (lhs: IdentifiableCoordinate, rhs: IdentifiableCoordinate) -> Bool {
        lhs.coordinate.latitude == rhs.coordinate.latitude && lhs.coordinate.longitude == rhs.coordinate.longitude
    }
}

struct ContentView: View {
    
    @State var region = MKCoordinateRegion(
        center: CLLocationCoordinate2D(latitude: 37.7749, longitude: -122.4194), // Default to San Francisco
        span: MKCoordinateSpan(latitudeDelta: 0.05, longitudeDelta: 0.05)
    )
    @State private var locationManager = CLLocationManager()
    @State private var directions: [(instruction: String, distance: String)] = []
    @State private var currentStepIndex: Int = 0
    @State private var selectedStepIndex: Int? = nil
    @State private var destinationCoordinate: IdentifiableCoordinate? = nil
    @State private var route: MKRoute? = nil
    @State private var trackingMode: MapUserTrackingMode = .follow
    @State private var destinationAddress: String = ""
    @State private var totalDistance: String = ""
    @State private var useKilometers: Bool = false
    
    @ObservedObject private var localSearchCompleter = LocalSearchCompleter()

    var body: some View {
        VStack {
            Map(coordinateRegion: $region, interactionModes: .all, showsUserLocation: true, userTrackingMode: $trackingMode, annotationItems: destinationCoordinate.map { [$0] } ?? []) { item in
                MapMarker(coordinate: item.coordinate, tint: .red)
            }
            .onAppear {
                let coordinator = Coordinator(contentView: self)
                locationManager.delegate = coordinator
                locationManager.requestWhenInUseAuthorization()
                locationManager.startUpdatingLocation()
            }
            .onChange(of: destinationCoordinate) { _ in
                calculateRoute()
            }
            .overlay(
                RouteOverlay(route: route, selectedStepIndex: selectedStepIndex)
            )
            
            VStack {
                HStack {
                    Text(useKilometers ? "km" : "mi")
                    Toggle("", isOn: $useKilometers)
                        .labelsHidden()
                        .onChange(of: useKilometers) { _ in
                            updateDistances()
                        }
                }
                .padding()

                TextField("Enter destination", text: $destinationAddress, onEditingChanged: { _ in
                    self.localSearchCompleter.updateSearch(query: self.destinationAddress)
                })
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .padding()
                
                if !localSearchCompleter.searchResults.isEmpty {
                    List(localSearchCompleter.searchResults, id: \.self) { result in
                        Text(result.title + " " + result.subtitle)
                            .onTapGesture {
                                self.selectSuggestion(result)
                            }
                    }
                    .frame(height: 200) // Limit height of suggestions list
                }
                
                if !totalDistance.isEmpty {
                    Text("Total Distance: \(totalDistance)")
                        .font(.headline)
                        .padding()
                }

                if !directions.isEmpty {
                    List(directions.indices, id: \.self) { index in
                        VStack(alignment: .leading) {
                            Text(directions[index].instruction)
                                .foregroundColor(index == currentStepIndex ? .blue : .black)
                                .bold(index == currentStepIndex)
                            Text(directions[index].distance)
                                .font(.subheadline)
                                .foregroundColor(.gray)
                        }
                        .background(index == selectedStepIndex ? Color.yellow.opacity(0.5) : Color.clear)
                        .onTapGesture {
                            self.selectedStepIndex = index
                        }
                    }
                }
            }
        }
    }
    
    func selectSuggestion(_ suggestion: MKLocalSearchCompletion) {
        let searchRequest = MKLocalSearch.Request(completion: suggestion)
        let search = MKLocalSearch(request: searchRequest)
        search.start { response, error in
            if let error = error {
                print("Error selecting suggestion: \(error.localizedDescription)")
                return
            }
            guard let coordinate = response?.mapItems.first?.placemark.coordinate else {
                print("No coordinate found for suggestion")
                return
            }
            self.destinationCoordinate = IdentifiableCoordinate(coordinate: coordinate)
            self.destinationAddress = suggestion.title + " " + suggestion.subtitle
            self.localSearchCompleter.searchResults = []
        }
    }
    
    func geocodeDestination() {
        let geocoder = CLGeocoder()
        geocoder.geocodeAddressString(destinationAddress) { placemarks, error in
            if let error = error {
                print("Geocoding error: \(error.localizedDescription)")
                return
            }
            guard let placemark = placemarks?.first, let location = placemark.location else {
                print("No location found")
                return
            }
            self.destinationCoordinate = IdentifiableCoordinate(coordinate: location.coordinate)
        }
    }
    
    func calculateRoute() {
        guard let destinationCoordinate = destinationCoordinate?.coordinate,
              let userLocation = locationManager.location?.coordinate else { return }

        let request = MKDirections.Request()
        request.source = MKMapItem(placemark: MKPlacemark(coordinate: userLocation))
        request.destination = MKMapItem(placemark: MKPlacemark(coordinate: destinationCoordinate))
        request.transportType = .automobile

        let directions = MKDirections(request: request)
        directions.calculate { response, error in
            if let error = error {
                print("Error calculating directions: \(error.localizedDescription)")
                return
            }
            if let response = response, let route = response.routes.first {
                self.route = route
                self.updateDistances()
                self.updateRegion(for: route)
            }
        }
    }
    
    func updateDistances() {
        guard let route = route else { return }
        if useKilometers {
            self.totalDistance = String(format: "%.2f km", route.distance / 1000)
            self.directions = route.steps.map {
                let distance = String(format: "%.2f km", $0.distance / 1000)
                return (instruction: $0.instructions, distance: distance)
            }.filter { !$0.instruction.isEmpty }
        } else {
            self.totalDistance = String(format: "%.2f mi", route.distance / 1609.34)
            self.directions = route.steps.map {
                let distance = String(format: "%.2f mi", $0.distance / 1609.34)
                return (instruction: $0.instructions, distance: distance)
            }.filter { !$0.instruction.isEmpty }
        }
    }

    func updateRegion(for route: MKRoute) {
        var regionRect = route.polyline.boundingMapRect
        regionRect.size.width *= 1.2
        regionRect.size.height *= 1.2
        regionRect.origin.x -= regionRect.size.width / 10
        regionRect.origin.y -= regionRect.size.height / 10
        region = MKCoordinateRegion(regionRect)
    }
    
    func updateCurrentStepIndex(userLocation: CLLocationCoordinate2D) {
        guard let route = route else { return }
        let userMapPoint = MKMapPoint(userLocation)
        
        for (index, step) in route.steps.enumerated() {
            let stepPolyline = step.polyline
            let stepRect = stepPolyline.boundingMapRect
            if stepRect.contains(userMapPoint) {
                currentStepIndex = index
                break
            }
        }
    }
}

struct RouteOverlay: UIViewRepresentable {
    var route: MKRoute?
    var selectedStepIndex: Int?

    func makeUIView(context: Context) -> MKMapView {
        let mapView = MKMapView()
        mapView.delegate = context.coordinator
        return mapView
    }

    func updateUIView(_ uiView: MKMapView, context: Context) {
        guard let route = route else { return }
        uiView.removeOverlays(uiView.overlays)
        uiView.addOverlay(route.polyline)
        
        if let selectedStepIndex = selectedStepIndex, selectedStepIndex < route.steps.count {
            let selectedStepPolyline = route.steps[selectedStepIndex].polyline
            uiView.addOverlay(selectedStepPolyline, level: .aboveRoads)
        }
        
        let region = MKCoordinateRegion(route.polyline.boundingMapRect)
        uiView.setRegion(region, animated: true)
    }

    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }

    class Coordinator: NSObject, MKMapViewDelegate {
        var parent: RouteOverlay

        init(_ parent: RouteOverlay) {
            self.parent = parent
        }

        func mapView(_ mapView: MKMapView, rendererFor overlay: MKOverlay) -> MKOverlayRenderer {
            if let polyline = overlay as? MKPolyline {
                let renderer = MKPolylineRenderer(overlay: polyline)
                if polyline == parent.route?.polyline {
                    renderer.strokeColor = .blue
                    renderer.lineWidth = 4
                } else {
                    renderer.strokeColor = .blue
                    renderer.lineWidth = 4
                }
                return renderer
            }
            return MKOverlayRenderer()
        }
    }
}

class Coordinator: NSObject, CLLocationManagerDelegate {
    var contentView: ContentView

    init(contentView: ContentView) {
        self.contentView = contentView
    }

    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        guard let location = locations.last else { return }
        contentView.region = MKCoordinateRegion(
            center: location.coordinate,
            span: MKCoordinateSpan(latitudeDelta: 0.05, longitudeDelta: 0.05)
        )
        contentView.updateCurrentStepIndex(userLocation: location.coordinate)
    }

    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {
        if status == .authorizedWhenInUse || status == .authorizedAlways {
            manager.startUpdatingLocation()
        } else {
            // Handle not authorized case
        }
    }
}

extension View {
    func bold(_ condition: Bool) -> some View {
        condition ? self.bold() as! Self : self
    }
}

#Preview {
    ContentView()
}
